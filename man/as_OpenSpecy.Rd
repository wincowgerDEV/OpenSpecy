% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_OpenSpecy.R
\name{as_OpenSpecy}
\alias{as_OpenSpecy}
\alias{as_OpenSpecy.OpenSpecy}
\alias{as_OpenSpecy.list}
\alias{as_OpenSpecy.data.frame}
\alias{as_OpenSpecy.default}
\alias{is_OpenSpecy}
\alias{OpenSpecy}
\alias{gen_grid}
\title{Coerce to Open Specy}
\usage{
as_OpenSpecy(x, ...)

\method{as_OpenSpecy}{OpenSpecy}(x, ...)

\method{as_OpenSpecy}{list}(x, ...)

\method{as_OpenSpecy}{data.frame}(x, colnames = list(wavenumber = NULL, spectra = NULL), ...)

\method{as_OpenSpecy}{default}(
  x,
  spectra,
  metadata = list(file_name = NULL, user_name = NULL, contact_info = NULL, organization =
    NULL, citation = NULL, spectrum_type = NULL, spectrum_identity = NULL, material_form
    = NULL, material_phase = NULL, material_producer = NULL, material_purity = NULL,
    material_quality = NULL, material_color = NULL, material_other = NULL, cas_number =
    NULL, instrument_used = NULL, instrument_accessories = NULL, instrument_mode = NULL,
    spectral_resolution = NULL, laser_light_used = NULL, number_of_accumulations = NULL,
    total_acquisition_time_s = NULL, 
     data_processing_procedure = NULL,
    level_of_confidence_in_identification = NULL, other_info = NULL, license =
    "CC BY-NC"),
  coords = "gen_grid",
  ...
)

is_OpenSpecy(x)

OpenSpecy(x, ...)

gen_grid(x)
}
\arguments{
\item{x}{x.}

\item{colnames}{cols.}

\item{spectra}{spectra.}

\item{metadata}{file = NULL.}

\item{coords}{coords = "gen_grid".}

\item{\ldots}{args.}
}
\value{
return
}
\description{
Functions to check if an object is an Open Specy spectrum, or coerce it if
possible.
}
\details{
\code{as_OpenSpecy()} converts spectral datasets to a threepart list,
one with a vector of the wavenumbers of the spectra,
the second with a \code{data.table} of all spectral intensities ordered as
columns,
the third item is another \code{data.table} with any metadata the user
provides or is harvested from the files themselves. Currently metadata
harvesting from jdx and opus files are supported as well as the two
Open Specy write formats yaml and json. There are many unique iterations of
spectral file formats so there may be bugs in the file conversion.
Please contact us if you identify any.
}
\examples{
c()

}
\seealso{
seealso.
}
\author{
Zacharias Steinmetz, Win Cowger
}
